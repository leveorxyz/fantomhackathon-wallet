/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  UserCellRegistry,
  UserCellRegistryInterface,
} from "../../contracts/UserCellRegistry";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "userCell",
        type: "string",
      },
    ],
    name: "getSaltHint",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "salt",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "userCell",
        type: "uint256",
      },
    ],
    name: "getUserAddress",
    outputs: [
      {
        internalType: "bool",
        name: "isRegistered",
        type: "bool",
      },
      {
        internalType: "address",
        name: "key",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "salt",
        type: "string",
      },
      {
        internalType: "string",
        name: "saltHint",
        type: "string",
      },
      {
        internalType: "string",
        name: "userCell",
        type: "string",
      },
      {
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
    ],
    name: "registerUser",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61102d8061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630e44186814610067578063715018a6146100975780638da5cb5b146100a1578063f2fde38b146100bf578063f54d5086146100db578063fd3c99521461010c575b600080fd5b610081600480360381019061007c919061078d565b610128565b60405161008e9190610855565b60405180910390f35b61009f6101d8565b005b6100a96101ec565b6040516100b691906108b8565b60405180910390f35b6100d960048036038101906100d491906108ff565b610215565b005b6100f560048036038101906100f091906109c2565b610298565b604051610103929190610a3d565b60405180910390f35b61012660048036038101906101219190610a66565b610409565b005b606060028260405161013a9190610b65565b9081526020016040518091039020805461015390610bab565b80601f016020809104026020016040519081016040528092919081815260200182805461017f90610bab565b80156101cc5780601f106101a1576101008083540402835291602001916101cc565b820191906000526020600020905b8154815290600101906020018083116101af57829003601f168201915b50505050509050919050565b6101e06104e9565b6101ea6000610567565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61021d6104e9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361028c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028390610c4e565b60405180910390fd5b61029581610567565b50565b6000806000600160008787876040516020016102b693929190610cb4565b6040516020818303038152906040528051906020012081526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900460ff1615151515815260200160018201805461036690610bab565b80601f016020809104026020016040519081016040528092919081815260200182805461039290610bab565b80156103df5780601f106103b4576101008083540402835291602001916103df565b820191906000526020600020905b8154815290600101906020018083116103c257829003601f168201915b50505050508152505090508060200151156104005760019250806000015191505b50935093915050565b6104116104e9565b60006001600088888660405160200161042c93929190610cde565b6040516020818303038152906040528051906020012081526020019081526020016000209050818160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018160000160146101000a81548160ff02191690831515021790555084846002856040516104c49190610b65565b908152602001604051809103902091826104df929190610ebb565b5050505050505050565b6104f161062b565b73ffffffffffffffffffffffffffffffffffffffff1661050f6101ec565b73ffffffffffffffffffffffffffffffffffffffff1614610565576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055c90610fd7565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61069a82610651565b810181811067ffffffffffffffff821117156106b9576106b8610662565b5b80604052505050565b60006106cc610633565b90506106d88282610691565b919050565b600067ffffffffffffffff8211156106f8576106f7610662565b5b61070182610651565b9050602081019050919050565b82818337600083830152505050565b600061073061072b846106dd565b6106c2565b90508281526020810184848401111561074c5761074b61064c565b5b61075784828561070e565b509392505050565b600082601f83011261077457610773610647565b5b813561078484826020860161071d565b91505092915050565b6000602082840312156107a3576107a261063d565b5b600082013567ffffffffffffffff8111156107c1576107c0610642565b5b6107cd8482850161075f565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156108105780820151818401526020810190506107f5565b60008484015250505050565b6000610827826107d6565b61083181856107e1565b93506108418185602086016107f2565b61084a81610651565b840191505092915050565b6000602082019050818103600083015261086f818461081c565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108a282610877565b9050919050565b6108b281610897565b82525050565b60006020820190506108cd60008301846108a9565b92915050565b6108dc81610897565b81146108e757600080fd5b50565b6000813590506108f9816108d3565b92915050565b6000602082840312156109155761091461063d565b5b6000610923848285016108ea565b91505092915050565b600080fd5b600080fd5b60008083601f84011261094c5761094b610647565b5b8235905067ffffffffffffffff8111156109695761096861092c565b5b60208301915083600182028301111561098557610984610931565b5b9250929050565b6000819050919050565b61099f8161098c565b81146109aa57600080fd5b50565b6000813590506109bc81610996565b92915050565b6000806000604084860312156109db576109da61063d565b5b600084013567ffffffffffffffff8111156109f9576109f8610642565b5b610a0586828701610936565b93509350506020610a18868287016109ad565b9150509250925092565b60008115159050919050565b610a3781610a22565b82525050565b6000604082019050610a526000830185610a2e565b610a5f60208301846108a9565b9392505050565b60008060008060008060808789031215610a8357610a8261063d565b5b600087013567ffffffffffffffff811115610aa157610aa0610642565b5b610aad89828a01610936565b9650965050602087013567ffffffffffffffff811115610ad057610acf610642565b5b610adc89828a01610936565b9450945050604087013567ffffffffffffffff811115610aff57610afe610642565b5b610b0b89828a0161075f565b9250506060610b1c89828a016108ea565b9150509295509295509295565b600081905092915050565b6000610b3f826107d6565b610b498185610b29565b9350610b598185602086016107f2565b80840191505092915050565b6000610b718284610b34565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610bc357607f821691505b602082108103610bd657610bd5610b7c565b5b50919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610c386026836107e1565b9150610c4382610bdc565b604082019050919050565b60006020820190508181036000830152610c6781610c2b565b9050919050565b6000610c7a8385610b29565b9350610c8783858461070e565b82840190509392505050565b6000819050919050565b610cae610ca98261098c565b610c93565b82525050565b6000610cc1828587610c6e565b9150610ccd8284610c9d565b602082019150819050949350505050565b6000610ceb828587610c6e565b9150610cf78284610b34565b9150819050949350505050565b600082905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610d717fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610d34565b610d7b8683610d34565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610db8610db3610dae8461098c565b610d93565b61098c565b9050919050565b6000819050919050565b610dd283610d9d565b610de6610dde82610dbf565b848454610d41565b825550505050565b600090565b610dfb610dee565b610e06818484610dc9565b505050565b5b81811015610e2a57610e1f600082610df3565b600181019050610e0c565b5050565b601f821115610e6f57610e4081610d0f565b610e4984610d24565b81016020851015610e58578190505b610e6c610e6485610d24565b830182610e0b565b50505b505050565b600082821c905092915050565b6000610e9260001984600802610e74565b1980831691505092915050565b6000610eab8383610e81565b9150826002028217905092915050565b610ec58383610d04565b67ffffffffffffffff811115610ede57610edd610662565b5b610ee88254610bab565b610ef3828285610e2e565b6000601f831160018114610f225760008415610f10578287013590505b610f1a8582610e9f565b865550610f82565b601f198416610f3086610d0f565b60005b82811015610f5857848901358255600182019150602085019450602081019050610f33565b86831015610f755784890135610f71601f891682610e81565b8355505b6001600288020188555050505b50505050505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610fc16020836107e1565b9150610fcc82610f8b565b602082019050919050565b60006020820190508181036000830152610ff081610fb4565b905091905056fea2646970667358221220e105f0bdfbba5c14401eb443e605861ec21e9d7dc833c9623a8549a89dfd80f464736f6c63430008110033";

type UserCellRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UserCellRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UserCellRegistry__factory extends ContractFactory {
  constructor(...args: UserCellRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<UserCellRegistry> {
    return super.deploy(overrides || {}) as Promise<UserCellRegistry>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): UserCellRegistry {
    return super.attach(address) as UserCellRegistry;
  }
  override connect(signer: Signer): UserCellRegistry__factory {
    return super.connect(signer) as UserCellRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UserCellRegistryInterface {
    return new utils.Interface(_abi) as UserCellRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UserCellRegistry {
    return new Contract(address, _abi, signerOrProvider) as UserCellRegistry;
  }
}
