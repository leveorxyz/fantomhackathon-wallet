/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  UserCellRegistry,
  UserCellRegistryInterface,
} from "../../contracts/UserCellRegistry";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "userCell",
        type: "uint256",
      },
    ],
    name: "getSaltHint",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "salt",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "userCell",
        type: "uint256",
      },
    ],
    name: "getUserAddress",
    outputs: [
      {
        internalType: "bool",
        name: "isRegistered",
        type: "bool",
      },
      {
        internalType: "address",
        name: "key",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "salt",
        type: "string",
      },
      {
        internalType: "string",
        name: "saltHint",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "userCell",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
    ],
    name: "registerUser",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610e758061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063415122ef14610067578063715018a6146100835780638da5cb5b1461008d578063f2fde38b146100ab578063f54d5086146100c7578063f8e97238146100f8575b600080fd5b610081600480360381019061007c9190610720565b610128565b005b61008b6101fd565b005b610095610211565b6040516100a291906107d6565b60405180910390f35b6100c560048036038101906100c091906107f1565b61023a565b005b6100e160048036038101906100dc919061081e565b6102bd565b6040516100ef929190610899565b60405180910390f35b610112600480360381019061010d91906108c2565b61042e565b60405161011f919061097f565b60405180910390f35b6101306104d3565b60006001600088888660405160200161014b93929190610a01565b6040516020818303038152906040528051906020012081526020019081526020016000209050818160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018160000160146101000a81548160ff02191690831515021790555084846002600086815260200190815260200160002091826101f3929190610c71565b5050505050505050565b6102056104d3565b61020f6000610551565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6102426104d3565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036102b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a890610db3565b60405180910390fd5b6102ba81610551565b50565b6000806000600160008787876040516020016102db93929190610a01565b6040516020818303038152906040528051906020012081526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900460ff1615151515815260200160018201805461038b90610a94565b80601f01602080910402602001604051908101604052809291908181526020018280546103b790610a94565b80156104045780601f106103d957610100808354040283529160200191610404565b820191906000526020600020905b8154815290600101906020018083116103e757829003601f168201915b50505050508152505090508060200151156104255760019250806000015191505b50935093915050565b606060026000838152602001908152602001600020805461044e90610a94565b80601f016020809104026020016040519081016040528092919081815260200182805461047a90610a94565b80156104c75780601f1061049c576101008083540402835291602001916104c7565b820191906000526020600020905b8154815290600101906020018083116104aa57829003601f168201915b50505050509050919050565b6104db610615565b73ffffffffffffffffffffffffffffffffffffffff166104f9610211565b73ffffffffffffffffffffffffffffffffffffffff161461054f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054690610e1f565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261064c5761064b610627565b5b8235905067ffffffffffffffff8111156106695761066861062c565b5b60208301915083600182028301111561068557610684610631565b5b9250929050565b6000819050919050565b61069f8161068c565b81146106aa57600080fd5b50565b6000813590506106bc81610696565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106ed826106c2565b9050919050565b6106fd816106e2565b811461070857600080fd5b50565b60008135905061071a816106f4565b92915050565b6000806000806000806080878903121561073d5761073c61061d565b5b600087013567ffffffffffffffff81111561075b5761075a610622565b5b61076789828a01610636565b9650965050602087013567ffffffffffffffff81111561078a57610789610622565b5b61079689828a01610636565b945094505060406107a989828a016106ad565b92505060606107ba89828a0161070b565b9150509295509295509295565b6107d0816106e2565b82525050565b60006020820190506107eb60008301846107c7565b92915050565b6000602082840312156108075761080661061d565b5b60006108158482850161070b565b91505092915050565b6000806000604084860312156108375761083661061d565b5b600084013567ffffffffffffffff81111561085557610854610622565b5b61086186828701610636565b93509350506020610874868287016106ad565b9150509250925092565b60008115159050919050565b6108938161087e565b82525050565b60006040820190506108ae600083018561088a565b6108bb60208301846107c7565b9392505050565b6000602082840312156108d8576108d761061d565b5b60006108e6848285016106ad565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561092957808201518184015260208101905061090e565b60008484015250505050565b6000601f19601f8301169050919050565b6000610951826108ef565b61095b81856108fa565b935061096b81856020860161090b565b61097481610935565b840191505092915050565b600060208201905081810360008301526109998184610946565b905092915050565b600081905092915050565b82818337600083830152505050565b60006109c783856109a1565b93506109d48385846109ac565b82840190509392505050565b6000819050919050565b6109fb6109f68261068c565b6109e0565b82525050565b6000610a0e8285876109bb565b9150610a1a82846109ea565b602082019150819050949350505050565b600082905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610aac57607f821691505b602082108103610abf57610abe610a65565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610b277fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610aea565b610b318683610aea565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610b6e610b69610b648461068c565b610b49565b61068c565b9050919050565b6000819050919050565b610b8883610b53565b610b9c610b9482610b75565b848454610af7565b825550505050565b600090565b610bb1610ba4565b610bbc818484610b7f565b505050565b5b81811015610be057610bd5600082610ba9565b600181019050610bc2565b5050565b601f821115610c2557610bf681610ac5565b610bff84610ada565b81016020851015610c0e578190505b610c22610c1a85610ada565b830182610bc1565b50505b505050565b600082821c905092915050565b6000610c4860001984600802610c2a565b1980831691505092915050565b6000610c618383610c37565b9150826002028217905092915050565b610c7b8383610a2b565b67ffffffffffffffff811115610c9457610c93610a36565b5b610c9e8254610a94565b610ca9828285610be4565b6000601f831160018114610cd85760008415610cc6578287013590505b610cd08582610c55565b865550610d38565b601f198416610ce686610ac5565b60005b82811015610d0e57848901358255600182019150602085019450602081019050610ce9565b86831015610d2b5784890135610d27601f891682610c37565b8355505b6001600288020188555050505b50505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610d9d6026836108fa565b9150610da882610d41565b604082019050919050565b60006020820190508181036000830152610dcc81610d90565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610e096020836108fa565b9150610e1482610dd3565b602082019050919050565b60006020820190508181036000830152610e3881610dfc565b905091905056fea2646970667358221220947ee22dbb71f240b326e4e264f85757bf91ca1569d45a7509e04bd4b2bd341164736f6c63430008110033";

type UserCellRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UserCellRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UserCellRegistry__factory extends ContractFactory {
  constructor(...args: UserCellRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<UserCellRegistry> {
    return super.deploy(overrides || {}) as Promise<UserCellRegistry>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): UserCellRegistry {
    return super.attach(address) as UserCellRegistry;
  }
  override connect(signer: Signer): UserCellRegistry__factory {
    return super.connect(signer) as UserCellRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UserCellRegistryInterface {
    return new utils.Interface(_abi) as UserCellRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UserCellRegistry {
    return new Contract(address, _abi, signerOrProvider) as UserCellRegistry;
  }
}
